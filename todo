Right now the simulator hierarchy looks like:

dnn_sim
  dram_interface
  control_processor
  datapath
    buffers
    NFU pipeline

the control processor has pointers to datapath and dram_interface which it can use to micromanage them (everything is public)
  we can convert this to a proper interface later

the control processor will also take care of the DMA actions
the control processor issues pipe_ops to the datapath when their data has been loaded to memory
once all pipe_ops have been issued (queued) then start the next instruction (keep trying to load SB until there is space)

what about NBout?
    

    

start with datapath, assume input buffers are full, ignore memory

BUGS:
    pipe_ops not propagating?

    Cycle: 99
    NFU_1: input non-empty                      // NFU is stalling for data
    SRAM port 0 is busy, increment access       // WHY
    SRAM port READ complete                     // sounds good, nothings happening
        this should set_sram_op_complete
        if(m_ports[i].m_op){ not executed

    Read sent                                   // to where?


TODO:

    sram needs to be redesigned
        include DMA in sram
        issue loads/stores to sram
        sram will only load when there is space
        pipe_ops will cause lines to be ejected
        pipe_ops know which entry to read

  centralize stat collection?
  simple memory model
  DRAMsim?
  create proper interface for datapath
